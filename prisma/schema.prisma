generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id               Int                @id @default(autoincrement()) @map("account_id")
  fullName         String             @map("full_name")
  email            String             @unique
  password         String
  active           Boolean            @default(true)
  phone            String?
  gender           Boolean?
  birthday         DateTime?          @db.Date
  roleId           Int                @default(3) @map("role_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  avatarId         Int?               @unique
  collectedCoupons CollectedCoupons[]
  avatar           UploadedImage?     @relation(fields: [avatarId], references: [id])
  role             Role               @relation(fields: [roleId], references: [id])
  addresses        Address[]
  orders           Order[]

  @@map("accounts")
}

model Address {
  id            Int     @id @default(autoincrement()) @map("address_id")
  provinceName  String  @map("province_name")
  provinceId    Int     @map("province_id")
  districtName  String  @map("district_name")
  districtId    Int     @map("district_id")
  wardName      String  @map("ward_name")
  wardCode      String  @map("ward_code")
  contactName   String  @map("contact_name")
  contactPhone  String  @map("contact_phone")
  detailAddress String  @map("detail_address")
  isDefault     Boolean @default(false) @map("is_default")
  accountId     Int     @map("account_id")
  isDeleted     Boolean @default(false) @map("is_deleted")
  account       Account @relation(fields: [accountId], references: [id])
  orders        Order[]

  @@map("addresses")
}

model UploadedImage {
  id            Int            @id @default(autoincrement()) @map("image_id")
  path          String
  filename      String         @unique
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  account       Account?
  color         Color?
  productImages ProductImage[]

  @@map("uploaded_images")
}

model Role {
  id       Int       @id @default(autoincrement()) @map("role_id")
  role     String
  accounts Account[]

  @@map("roles")
}

model Category {
  id        Int        @id @default(autoincrement()) @map("category_id")
  name      String
  slug      String
  parentId  Int?       @map("parent_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  parent    Category?  @relation("categoryRelation", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("categoryRelation")
  products  Product[]

  @@map("categories")
}

model Color {
  id               Int           @id @default(autoincrement()) @map("color_id")
  name             String
  productId        Int           @map("product_id")
  productImageId   Int           @unique @map("product_image_id")
  thumbnailImageId Int           @unique @map("thumbnail_image_id")
  product          Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productImage     ProductImage  @relation(fields: [productImageId], references: [id], onDelete: Cascade)
  thumbnailImage   UploadedImage @relation(fields: [thumbnailImageId], references: [id], onDelete: Cascade)
  variant          Variant[]

  @@map("colors")
}

model Size {
  id          Int       @id @default(autoincrement()) @map("size_id")
  name        String
  description String
  variants    Variant[]

  @@map("sizes")
}

model ProductImage {
  imageId   Int           @map("image_id")
  productId Int           @map("product_id")
  id        Int           @id @default(autoincrement()) @map("product_image_id")
  color     Color?
  image     UploadedImage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([imageId, productId])
  @@map("product_images")
}

model Product {
  id          Int            @id @default(autoincrement()) @map("product_id")
  name        String
  price       Float
  visible     Boolean        @default(true)
  description String
  overview    String
  material    String
  instruction String
  slug        String         @unique
  categoryId  Int?           @map("category_id")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  soldNumber  Int            @default(0)
  colors      Color[]
  images      ProductImage[]
  category    Category?      @relation(fields: [categoryId], references: [id])
  variants    Variant[]

  @@map("products")
}

model Variant {
  quantity    Int
  colorId     Int           @map("color_id")
  sizeId      Int           @map("size_id")
  productId   Int           @map("product_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  id          Int           @id @default(autoincrement()) @map("variant_id")
  OrderDetail OrderDetail[]
  color       Color         @relation(fields: [colorId], references: [id], onDelete: Cascade)
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  size        Size          @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@unique([productId, colorId, sizeId])
  @@map("variants")
}

model PaymentMethod {
  id       Int       @id @default(autoincrement()) @map("payment_method_id")
  name     String
  payments Payment[]

  @@map("payment_methods")
}

model PaymentStatus {
  id       Int       @id @default(autoincrement()) @map("payment_status_id")
  name     String
  payments Payment[]

  @@map("payment_statuses")
}

model Payment {
  id              Int           @id @default(autoincrement()) @map("payment_id")
  amount          Float
  paymentMethodId Int           @map("payment_method_id")
  orderId         Int           @unique @map("order_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  paymentStatusId Int
  order           Order         @relation(fields: [orderId], references: [id])
  paymentStatus   PaymentStatus @relation(fields: [paymentStatusId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("payments")
}

model OrderStatus {
  id            Int             @id @default(autoincrement()) @map("order_status_id")
  name          String
  OrderTracking OrderTracking[]
  orders        Order[]

  @@map("order_statuses")
}

model Order {
  id                Int   @id @default(autoincrement()) @map("order_id")
  totalPrice        Float @map("total_price")
  totalDiscount     Float @map("total_discount")
  finalPrice        Float @map("final_price")
  shippingFee       Float @map("shipping_fee")
  buyerId           Int   @map("buyer_id")
  deliveryAddressId Int   @map("delivery_address_id")
  currentStatusId   Int   @map("current_status_id")

  buyer           Account         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  currentStatus   OrderStatus     @relation(fields: [currentStatusId], references: [id])
  deliveryAddress Address         @relation(fields: [deliveryAddressId], references: [id])
  Payment         Payment?
  OrderTracking   OrderTracking[]
  OrderDetail     OrderDetail[]
  usedCouponId    Int?            @map("used_coupon_id")
  usedCoupon      Coupon?         @relation(fields: [usedCouponId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderTracking {
  id            Int         @id @default(autoincrement()) @map("order_tracking_id")
  orderId       Int         @map("order_id")
  orderStatusId Int         @map("order_status_id")
  beginAt       DateTime    @default(now()) @map("begin_at")
  finishAt      DateTime?   @map("finish_at")
  order         Order       @relation(fields: [orderId], references: [id])
  orderStatus   OrderStatus @relation(fields: [orderStatusId], references: [id])

  @@unique([orderId, orderStatusId])
  @@map("order_trackings")
}

model OrderDetail {
  orderId   Int     @map("order_id")
  variantId Int     @map("variant_id")
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  variant   Variant @relation(fields: [variantId], references: [id])

  @@id([orderId, variantId])
  @@map("order_details")
}

model Coupon {
  id                Int                @id @default(autoincrement()) @map("coupon_id")
  code              String             @unique
  discountType      String
  discountValue     Float
  startDate         DateTime           @map("start_date")
  endDate           DateTime           @map("end_date")
  currentUse        Int                @default(0) @map("current_use")
  minimumPriceToUse Float              @map("minumin_price_to_use")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  collectedQuantity Int                @default(0) @map("collected_quantity")
  quantity          Int
  visible           Boolean            @default(true)
  accountsCollected CollectedCoupons[]
  ordersUsed        Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("coupons")
}

model CollectedCoupons {
  accountId Int     @map("account_id")
  couponId  Int     @map("coupon_id")
  used      Boolean @default(false)

  account Account @relation(fields: [accountId], references: [id])
  coupon  Coupon  @relation(fields: [couponId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  account   Account  @relation(fields: [accountId], references: [id])
  coupon    Coupon   @relation(fields: [couponId], references: [id])

  @@id([accountId, couponId])
  @@map("account_coupons")
}
