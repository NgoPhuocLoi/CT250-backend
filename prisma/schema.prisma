// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Int            @id @default(autoincrement()) @map("account_id")
  fullName String         @map("full_name")
  email    String         @unique
  password String
  active   Boolean        @default(true)
  phone    String?
  gender   Boolean?
  birthday DateTime?      @db.Date
  avatarId Int?           @unique
  avatar   UploadedImage? @relation(fields: [avatarId], references: [id])

  roleId Int  @default(3) @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  addresses        Address[]
  orders           Order[]
  collectedCoupons CollectedCoupons[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("accounts")
}

model Address {
  id            Int     @id @default(autoincrement()) @map("address_id")
  provinceName  String  @map("province_name")
  provinceId    Int     @map("province_id")
  districtName  String  @map("district_name")
  districtId    Int     @map("district_id")
  wardName      String  @map("ward_name")
  wardCode      String  @map("ward_code")
  contactName   String  @map("contact_name")
  contactPhone  String  @map("contact_phone")
  detailAddress String  @map("detail_address")
  isDefault     Boolean @default(false) @map("is_default")
  isDeleted     Boolean @default(false) @map("is_deleted")

  accountId Int     @map("account_id")
  account   Account @relation(fields: [accountId], references: [id])
  orders    Order[]

  @@map("addresses")
}

model UploadedImage {
  id       Int    @id @default(autoincrement()) @map("image_id")
  path     String
  filename String @unique

  color         Color?
  productImages ProductImage[]
  account       Account?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("uploaded_images")
}

model Role {
  id       Int       @id @default(autoincrement()) @map("role_id")
  role     String
  accounts Account[]

  @@map("roles")
}

model Category {
  id        Int        @id @default(autoincrement()) @map("category_id")
  name      String
  slug      String
  parentId  Int?       @map("parent_id")
  parent    Category?  @relation("categoryRelation", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("categoryRelation")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Color {
  id   Int    @id @default(autoincrement()) @map("color_id")
  name String

  thumbnailImageId Int           @unique @map("thumbnail_image_id")
  thumbnailImage   UploadedImage @relation(fields: [thumbnailImageId], references: [id], onDelete: Cascade)

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  productImageId Int          @unique @map("product_image_id")
  productImage   ProductImage @relation(fields: [productImageId], references: [id], onDelete: Cascade)

  variant Variant[]

  @@map("colors")
}

model Size {
  id          Int       @id @default(autoincrement()) @map("size_id")
  name        String
  description String
  variants    Variant[]

  @@map("sizes")
}

model ProductImage {
  id        Int @id @default(autoincrement()) @map("product_image_id")
  imageId   Int @map("image_id")
  productId Int @map("product_id")

  image   UploadedImage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  color Color?

  @@unique([imageId, productId])
  @@map("product_images")
}

model Product {
  id          Int            @id @default(autoincrement()) @map("product_id")
  name        String
  price       Float
  visible     Boolean        @default(true)
  description String
  overview    String
  material    String
  instruction String
  slug        String         @unique
  soldNumber  Int            @default(0)
  categoryId  Int?           @map("category_id")
  category    Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  variants    Variant[]
  images      ProductImage[]
  colors      Color[]

  @@map("products")
}

model Variant {
  id        Int @id @default(autoincrement()) @map("variant_id")
  quantity  Int
  colorId   Int @map("color_id")
  sizeId    Int @map("size_id")
  productId Int @map("product_id")

  color   Color   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  OrderDetail OrderDetail[]

  @@unique([productId, colorId, sizeId])
  @@map("variants")
}

model PaymentMethod {
  id   Int    @id @default(autoincrement()) @map("payment_method_id")
  name String

  payments Payment[]

  @@map("payment_methods")
}

model PaymentStatus {
  id   Int    @id @default(autoincrement()) @map("payment_status_id")
  name String

  payments Payment[]

  @@map("payment_statuses")
}

model Payment {
  id              Int   @id @default(autoincrement()) @map("payment_id")
  amount          Float
  paymentStatusId Int
  paymentMethodId Int   @map("payment_method_id")
  orderId         Int   @unique @map("order_id")

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentStatus PaymentStatus @relation(fields: [paymentStatusId], references: [id])
  order         Order         @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("payments")
}

model OrderStatus {
  id   Int    @id @default(autoincrement()) @map("order_status_id")
  name String

  orders        Order[]
  OrderTracking OrderTracking[]

  @@map("order_statuses")
}

model Order {
  id                Int   @id @default(autoincrement()) @map("order_id")
  totalPrice        Float @map("total_price")
  totalDiscount     Float @map("total_discount")
  finalPrice        Float @map("final_price")
  shippingFee       Float @map("shipping_fee")
  buyerId           Int   @map("buyer_id")
  deliveryAddressId Int   @map("delivery_address_id")
  currentStatusId   Int   @map("current_status_id")

  buyer           Account         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  currentStatus   OrderStatus     @relation(fields: [currentStatusId], references: [id])
  deliveryAddress Address         @relation(fields: [deliveryAddressId], references: [id])
  Payment         Payment?
  OrderTracking   OrderTracking[]
  OrderDetail     OrderDetail[]
  usedCoupons     UsedCoupon[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderTracking {
  id            Int       @id @default(autoincrement()) @map("order_tracking_id")
  orderId       Int       @map("order_id")
  orderStatusId Int       @map("order_status_id")
  beginAt       DateTime  @default(now()) @map("begin_at")
  finishAt      DateTime? @map("finish_at")

  order       Order       @relation(fields: [orderId], references: [id])
  orderStatus OrderStatus @relation(fields: [orderStatusId], references: [id])

  @@unique([orderId, orderStatusId])
  @@map("order_trackings")
}

model OrderDetail {
  orderId   Int   @map("order_id")
  variantId Int   @map("variant_id")
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])

  @@id([orderId, variantId])
  @@map("order_details")
}

model Coupon {
  id                Int      @id @default(autoincrement()) @map("coupon_id")
  code              String   @unique
  discountType      String
  discountValue     Float
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  quantity          Int
  visible           Boolean  @default(true)
  collectedQuantity Int      @default(0) @map("collected_quantity")
  currentUse        Int      @default(0) @map("current_use")
  minimumPriceToUse Float    @map("minumin_price_to_use")

  accountsCollected CollectedCoupons[]
  ordersUsed        UsedCoupon[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("coupons")
}

model CollectedCoupons {
  accountId Int @map("account_id")
  couponId  Int @map("coupon_id")

  account Account @relation(fields: [accountId], references: [id])
  coupon  Coupon  @relation(fields: [couponId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([accountId, couponId])
  @@map("account_coupons")
}

model UsedCoupon {
  id       Int @id @default(autoincrement()) @map("used_coupon_id")
  couponId Int @map("coupon_id")
  orderId  Int @map("order_id")

  coupon Coupon @relation(fields: [couponId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  @@map("used_coupons")
}
